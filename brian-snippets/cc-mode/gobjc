# -*- mode: snippet -*-
#name: gobjc
#key: gobjc
#expand-env: ((yas/indent-line 'auto) (yas/after-exit-snippet-hook 'brian-yasnippet-indent-buffer)
# --
#include "${1:$(downcase yas/text)}-${2:$(downcase (brian-un-camelcase-string yas/text ?-))}.h"

#define ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ${1:$(upcase yas/text)}_TYPE_${2:$(upcase (brian-un-camelcase-string yas/text))}, $1$2Private))

typedef struct $1$2Private_ $1$2Private;
struct ${1:Prefix}${2:Name}Private_
{
  GObject *an_object;

};

/*
 * Signals and Props
 */
enum {
    CHANGED_SIGNAL,
    LAST_SIGNAL
};

enum {
    PROP_0,
    PROP_NUM1,
    PROP_NUM2,
    PROP_NUM3
};

static guint ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_signals[LAST_SIGNAL] = { 0 };

/* 
 * Forward Declarations
 */
static void ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_class_init($1$2Class *klass);
static void ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_set_property(GObject *obj, guint prop_id,
					  const GValue *value,
					  GParamSpec *spec);
static void ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_get_property(GObject *obj, guint prop_id,
					  GValue *value,
					  GParamSpec *spec);
static void ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_init($1$2 *obj);
static void ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_dispose(GObject *obj);
static void ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_finalize(GObject *obj);

/*
 * Generate boiler-plate code.
 */

${3:$$(yas/choose-value '(
"G_DEFINE_TYPE( "
"G_DEFINE_TYPE_WITH_CODE( "
))} $1$2, 
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string
yas/text))},
G_TYPE_OBJECT $0);

static void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_class_init ($1$2Class *klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
  GParamSpec *pspec;

  gobject_class->dispose = ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_dispose;
  gobject_class->finalize = ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_finalize;

  g_type_class_add_private (klass, sizeof ($1$2Private));

  gobject_class->set_property = ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_set_property;
  gobject_class->get_property = ${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_get_property;

  pspec = g_param_spec_string ("${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}",
                                          "$1$2 construct prop",
                                          "Set name",
                                          "no-name-set" /* default value */,
                                          G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE);

  g_object_class_install_property (gobject_class,
                                   PROP_NUM1,
                                   pspec);
}

static void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_init ($1$2 *self)
{
  $1$2Private *priv = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}_GET_PRIVATE (self);

  priv->an_object = g_object_new (G_TYPE_OBJECT, NULL);
}

static void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_dispose (GObject *gobject)
{
  $1$2 *self = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))} (gobject);

  /* 
   * In dispose, you are supposed to free all types referenced from this
   * object which might themselves hold a reference to self. Generally,
   * the most simple solution is to unref all members on which you own a 
   * reference.
   */

  /* dispose might be called multiple times, so we must guard against
   * calling g_object_unref() on an invalid GObject.
   */
   /*
  if (self->priv->an_object) {
      g_object_unref (self->priv->an_object);

      self->priv->an_object = NULL;
      }
    */
  /* Chain up to the parent class */
  G_OBJECT_CLASS (${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_parent_class)->dispose (gobject);
}

static void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_finalize (GObject *gobject)
{
  $1$2 *self = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))} (gobject);
  $1$2Private *priv = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}_GET_PRIVATE (self);

  /* Chain up to the parent class */
  $1$2Class *klass = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}_GET_CLASS( self );
  GObjectClass *parent = g_type_class_peek_parent( klass );
    G_OBJECT_CLASS (${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_parent_class)->finalize (gobject);
}

static void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_set_property (GObject *object, guint prop_id, 
			       const GValue *value, GParamSpec *spec)
{
    $1$2 *obj = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}(object);

    switch(prop_id) {

    default:
	G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, spec);
	break;
    }
}

static void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_get_property (GObject *object, guint prop_id,
			       GValue *value, GParamSpec *spec)
{
    $1$2 *obj;
    $1$2Private *priv;

    obj = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}(object);
    priv = ${1:$(upcase yas/text)}_${2:$(upcase (brian-un-camelcase-string yas/text))}_GET_PRIVATE(obj);

    switch(prop_id) {

    default:
	G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, spec);
	break;

    }
}

$1$2 *
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string yas/text))}_new ()
{
  return g_object_new( ${1:$(upcase yas/text)}_TYPE_${2:$(upcase (brian-un-camelcase-string yas/text))},
  	 NULL );
}

$1$2 *
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string
yas/text))}_ref ( $1$2 *obj )
{
  return g_object_ref( obj );
}

void
${1:$(downcase yas/text)}_${2:$(downcase (brian-un-camelcase-string
yas/text))}_unref ( $1$2 *obj )
{
  g_object_unref( obj );
}

