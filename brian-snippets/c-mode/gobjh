# -*- mode: snippet -*-
#name: gobjh
#key: gobjh
# --
/*
 * Internal LISP Functions (IGNORE or DELETE)
 * `
(defun brian-un-camelcase-string (s &optional sep start)
  "Convert CamelCase string S to lower case with word separator SEP.
    Default for SEP is a hyphen \"-\".
    If third argument START is non-nil, convert words after that
    index in STRING."
  (let ((case-fold-search nil))
    (while (string-match "[A-Z]" s (or start 1))
      (setq s (replace-match (concat (or sep "_") 
				     (downcase (match-string 0 s))) 
			     t nil s)))
    (downcase s)))
`
 * END Internal LISP Functions
 */

/*
 * Copyright/Licensing information.
 */

#ifndef __${1:$(upcase (brian-un-camelcase-string text))}_${2:$(upcase (brian-un-camelcase-string text))}_H__
#define __${1:$(upcase (brian-un-camelcase-string text))}_${2:$(upcase (brian-un-camelcase-string text))}_H__

#include <glib-object.h>
/*
 * Potentially, include other headers on which this header depends.
 */

/*
 * Type macros.
 */
#define ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))}                  (${1:$(downcase (brian-un-camelcase-string text))}_${2:$(downcase (brian-un-camelcase-string text))}_get_type ())
#define ${1:$(upcase (brian-un-camelcase-string text))}_${2:$(upcase (brian-un-camelcase-string text))}(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))}, $1$2))
#define ${1:$(upcase (brian-un-camelcase-string text))}_IS_${2:$(upcase (brian-un-camelcase-string text))}(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))}))
#define ${1:$(upcase (brian-un-camelcase-string text))}_${2:$(upcase (brian-un-camelcase-string text))}_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))}, $1$2Class))
#define ${1:$(upcase (brian-un-camelcase-string text))}_IS_${2:$(upcase (brian-un-camelcase-string text))}_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))}))
#define ${1:$(upcase (brian-un-camelcase-string text))}_${2:$(upcase (brian-un-camelcase-string text))}_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))}, $1$2Class))

typedef struct _$1$2	        ${1:Name}${2:Type};
typedef struct _$1$2Class	$1$2Class;

struct _$1$2
{
  GObject parent_instance;

  /* instance members */
  $0
};

struct _$1$2Class
{
  GObjectClass parent_class;

  /* class members */
};

/* used by ${1:$(upcase (brian-un-camelcase-string text))}_TYPE_${2:$(upcase (brian-un-camelcase-string text))} */
GType ${1:$(downcase (brian-un-camelcase-string text))}_${2:$(downcase (brian-un-camelcase-string text))}_get_type (void);

/*
 * Method definitions.
 */

#endif /* __${1:$(upcase (brian-un-camelcase-string text))}_${2:$(upcase (brian-un-camelcase-string text))}_H__ */
